// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String                   @id @default(cuid())
    name                   String?
    email                  String?                  @unique
    emailVerified          DateTime?
    image                  String?
    lastSeen               DateTime                 @default(now())
    accounts               Account[]
    sessions               Session[]
    UserParties            UserParties[]
    CreatedParties         Party[]
    ChatEvent              ChatEvent[]
    UserEnterEvents        UserEnterEvent[]
    UserLeaveEvents        UserLeaveEvent[]
    PartyLeaderChangeEvent PartyLeaderChangeEvent[]
    PartyCreateEvent       PartyCreateEvent[]
    PartyDestroyEvent      PartyDestroyEvent[]
    ChangeTeamEvent        ChangeTeamEvent[]
}

model UserParties {
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    party   Party  @relation(fields: [partyId], references: [id], onDelete: Cascade)
    partyId String

    @@unique([userId, partyId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Party {
    id          String        @id @default(cuid())
    leader      User          @relation(fields: [leaderId], references: [id], onDelete: Cascade)
    leaderId    String
    active      Boolean       @default(true)
    UserParties UserParties[]
    Events      Event[]
}

model Event {
    id                     Int                     @id @default(autoincrement())
    party                  Party                   @relation(fields: [partyId], references: [id], onDelete: Cascade)
    partyId                String
    createdAt              DateTime                @default(now())
    ChatEvent              ChatEvent?
    UserEnterEvent         UserEnterEvent?
    UserLeaveEvent         UserLeaveEvent?
    PartyLeaderChangeEvent PartyLeaderChangeEvent?
    PartyCreateEvent       PartyCreateEvent?
    PartyDestroyEvent      PartyDestroyEvent?
    ChangeTeamEvent        ChangeTeamEvent?
}

model ChatEvent {
    id      String @id @default(cuid())
    eventId Int    @unique
    Event   Event  @relation(fields: [eventId], references: [id])
    message String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
}

model UserEnterEvent {
    id      String @id @default(cuid())
    eventId Int    @unique
    Event   Event  @relation(fields: [eventId], references: [id])
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
}

model UserLeaveEvent {
    id      String @id @default(cuid())
    eventId Int    @unique
    Event   Event  @relation(fields: [eventId], references: [id])
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
}

model PartyLeaderChangeEvent {
    id      String @id @default(cuid())
    eventId Int    @unique
    Event   Event  @relation(fields: [eventId], references: [id])
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
}

model PartyCreateEvent {
    id      String @id @default(cuid())
    userId  String
    User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    eventId Int    @unique
    Event   Event  @relation(fields: [eventId], references: [id])
}

model PartyDestroyEvent {
    id      String  @id @default(cuid())
    eventId Int     @unique
    Event   Event   @relation(fields: [eventId], references: [id])
    userId  String?
    User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Team {
    red
    blue
}

model ChangeTeamEvent {
    id      String @id @default(cuid())
    eventId Int    @unique
    event   Event  @relation(fields: [eventId], references: [id])
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    team    Team
}
